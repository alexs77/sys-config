# # Usage:
#   # ansible.builtin.include_tasks: _gnome-shell_extension.yml
#   # loop:
#   #   - { name: "Display Name", 
#   #       flag: flag_from_host_var_file,
#   #       src: source url to download from - optional,
#   #       uuid: uuid to enable or disable,
#   #       state: 'present' to enable, 'absent' to disable }

# - name: "gnome | extension | {{ item.name }} | Enabling | create extension directory"
#   become_user: "{{ user_name }}"
#   ansible.builtin.file:
#     dest: "~/.local/share/gnome-shell/extensions/{{ item.uuid }}"
#     state: directory
#   when:
#     # should it be enabled? (ie. value = present)
#     - lookup('vars', item.flag, default='absent') == 'present'
#     - item.src is defined

# - name: "gnome | extension | {{ item.name }} | Enabling | unarchive package"
#   become_user: "{{ user_name }}"
#   ansible.builtin.unarchive:
#     src: "{{ item.src }}"
#     dest: "~/.local/share/gnome-shell/extensions/{{ item.uuid }}"
#     remote_src: yes
#   when:
#     # should it be enabled? (ie. value = present)
#     - lookup('vars', item.flag, default='absent') == 'present'
#     - item.src is defined

# - name: "gnome | extension | {{ item.name }} | Get list of enabled extensions"
#   tags: gnome,extension,{{ item.flag }}
#   become_user: "{{ user_name }}"
#   community.general.dconf:
#     key: /org/gnome/shell/enabled-extensions
#     state: read
#   register: enabled_extensions
#   changed_when: no

# - name: "gnome | extension | {{ item.name }} | Get list of disabled extensions"
#   tags: gnome,extension,{{ item.flag }}
#   become_user: "{{ user_name }}"
#   community.general.dconf:
#     key: /org/gnome/shell/disabled-extensions
#     state: read
#   register: disabled_extensions
#   changed_when: no

# - name: "gnome | extension | {{ item.name }} | Enabling | Remove from list of disabled extensions"
#   tags: "gnome,extension,{{ item.flag }}"
#   become_user: "{{ user_name }}"
#   community.general.dconf:
#     key: /org/gnome/shell/disabled-extensions
#     # var.value may contain:
#     # - @as []
#     # or:
#     # - ['abc', 'def']
#     # Identical to "add to ...". Difference: use "difference()" filter to remove element
#     value: "{{ ('[' + ((disabled_extensions.value | regex_replace('(?:]|(?:@as )?[,[])', '') | split(' ') | difference([(\"'\" + item.uuid + \"'\")])) | sort | unique | join(',')) + ']') | replace('[,', '[') | replace('[]', '@as []') | string }}"
#     state: present
#   when:
#     # should it be enabled? (ie. value = present)
#     - lookup('vars', item.flag, default='absent') == 'present'
#     # only try to remove from disabled extensions, if uuid is in the list 
#     # -> don't do anything, if there's nothing to be done.
#     - item.uuid in disabled_extensions.value

# - name: "gnome | extension | {{ item.name }} | Enabling | Add to list of enabled extensions"
#   tags: gnome,extension,{{ item.flag }}
#   become_user: "{{ user_name }}"
#   community.general.dconf:
#     key: /org/gnome/shell/enabled-extensions
#     # var.value may contain:
#     # - @as []
#     # or:
#     # - ['abc', 'def']
#     # Add "'foobar'" as element to this list.
#     # - First remove "[", "]", "," and "@as "
#     # - Then convert string to array, splitting on " " (space)
#     # - Add "'foobar'" to the list
#     # - Sort the list
#     # - Make it unique
#     # - Convert list to string, with "," as seperator
#     # - Add '[' and ']' as prefix/suffix
#     # - Convert result to string, so that there's no
#     #   implicit conversion from list to string
#     value: "{{ ('[' + ((enabled_extensions.value | regex_replace('(?:]|(?:@as )?[,[])', '') | split(' ') + [(\"'\" + item.uuid + \"'\")]) | sort | unique | join(',')) + ']') | replace('[,', '[') | string }}"
#     state: present
#   when:
#     # should it be enabled? (ie. value = present)
#     - lookup('vars', item.flag, default='absent') == 'present'
#     # only try to add it to enabled extensions, if uuid is not already in the list 
#     # -> don't do anything, if there's nothing to be done.
#     - item.uuid not in enabled_extensions.value

# - name: "gnome | extension | {{ item.name }} | Disabling | Remove from list of enabled extensions"
#   tags: gnome,extension,{{ item.flag }}
#   become_user: "{{ user_name }}"
#   community.general.dconf:
#     key: /org/gnome/shell/enabled-extensions
#     # Explanation: See above.
#     value: "{{ ('[' + ((enabled_extensions.value | regex_replace('(?:]|(?:@as )?[,[])', '') | split(' ') | difference([(\"'\" + item.uuid + \"'\")])) | sort | unique | join(',')) + ']') | replace('[,', '[') | replace('[]', '@as []') | string }}"
#     state: present
#   when:
#     # should it be disabled? (ie. value = absent)
#     - lookup('vars', item.flag, default='absent') == 'absent'
#     # only try to remove from disabled extensions, if uuid is in the list 
#     # -> don't do anything, if there's nothing to be done.
#     - item.uuid in enabled_extensions.value

# - name: "gnome | extension | {{ item.name }} | Disabling | Add to list of disabled extensions"
#   tags: gnome,extension,{{ item.flag }}
#   become_user: "{{ user_name }}"
#   community.general.dconf:
#     key: /org/gnome/shell/disabled-extensions
#     # Explanation: See above.
#     value: "{{ ('[' + ((disabled_extensions.value | regex_replace('(?:]|(?:@as )?[,[])', '') | split(' ') + [(\"'\" + item.uuid + \"'\")]) | sort | unique | join(',')) + ']') | replace('[,', '[') | string }}"
#     state: present
#   when:
#     # should it be disabled? (ie. value = absent)
#     - lookup('vars', item.flag, default='absent') == 'absent'
#     # only try to add it to enabled extensions, if uuid is already in the list 
#     # -> don't do anything, if there's nothing to be done.
#     - item.uuid not in disabled_extensions.value

# - name: "gnome | extension | {{ item.name }} | Disabling | delete package files"
#   tags: gnome,extension,{{ item.flag }}
#   become_user: "{{ user_name }}"
#   ansible.builtin.file:
#     path: "~/.local/share/gnome-shell/extensions/{{ item.uuid }}"
#     state: absent
#   when:
#     # should it be enabled? (ie. value = present)
#     - lookup('vars', item.flag, default='absent') == 'absent'
#     - item.src is defined
