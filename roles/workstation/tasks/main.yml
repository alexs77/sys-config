# Load distro-specific variables
- name: workstation | include distribution variables
  ansible.builtin.include_vars: "{{ ansible_distribution }}.yml"
  tags: always

- name: workstation | include packages variables
  ansible.builtin.include_vars: packages.yml
  tags: always

- name: workstation | tasks
  block:
  ## User configs
  - name: workstation | import task | create user
    ansible.builtin.import_tasks: users/user.yml

  ## desktop environments
  - name: "workstation | include task | mate"
    ansible.builtin.include_tasks: "desktop_environments/mate/{{ inc_task }}.yml"
    when: mate is defined and mate == true
    with_items:
      # Do *NOT* sort these!
      - appearance
      - caja
      - keybindings
      - packages
      - peripherals
      - terminal
      - workspace_settings
    loop_control:
      loop_var: inc_task

  - name: "workstation | include task | gnome"
    ansible.builtin.include_tasks: "desktop_environments/gnome/{{ inc_task }}.yml"
    when: gnome is defined and gnome == true
    with_items:
      # Do *NOT* sort these!
      - appearance
      - extensions
      - keybindings
      - nautilus
      - packages
      - peripherals
      - shell_settings
      - terminal
      - tracker
    loop_control:
      loop_var: inc_task

  ## system setup
  - name: "workstation | include task | system setup"
    ansible.builtin.include_tasks: "system_setup/{{ inc_task }}.yml"
    with_items:
      # Do *NOT* sort these!
      - autofs 
      - scripts
      - tweaks
    loop_control:
      loop_var: inc_task

  ## install software
  - name: software | packages | apts
    tags: packages,apt,workstation-packages
    ansible.builtin.include_tasks: "software/_apt_repo_pkg.yml"
    loop: "{{ packages }}"
    loop_control:
      loop_var: package
    when:
      - package.name in _names
      - ansible_os_family == "Debian"
    vars:
      _names: "{{ apts | map(attribute='name') | list }}"

  - name: software | packages | flatpaks
    tags: packages,flatpak,workstation-packages
    become_user: "{{ user_name }}"
    community.general.flatpak:
      name: "{{ (flatpaks | selectattr('name', 'equalto', package.name) | first).pkg }}"
      method: user
      state: "{{ (package.state in ['false', 'absent', 'no', false]) | ternary('absent', 'present') }}"
    loop: "{{ packages }}"
    loop_control:
      loop_var: package
    when: package.name in _names
    vars:
      _names: "{{ flatpaks | map(attribute='name') | list }}"

  # note: snap packages not automated in arch yet, snapd is not available in repo
  - name: software | packges | snaps
    tags: packages,snap,workstation-packages
    community.general.snap:
      name: "{{ (snaps | selectattr('name', 'equalto', package.name) | first).name }}"
      channel: "{{ (snaps | selectattr('name', 'equalto', package.name) | first).channl | default(omit) }}"
      state: "{{ (package.state in ['false', 'absent', 'no', false]) | ternary('absent', 'present') }}"
    loop: "{{ packages }}"
    loop_control:
      loop_var: package
    when:
      - package.name in _names
      - ansible_distribution != "Archlinux"
    vars:
      _names: "{{ snaps | map(attribute='name') | list }}"

  - name: software | package | generic packages
    tags: packages,workstation-packages
    ansible.builtin.package:
      name: "{{ package }}"
      state: "{{ (package.state in ['false', 'absent', 'no', false]) | ternary('absent', 'present') }}"
    loop: "{{ packages }}"
    loop_control:
      loop_var: package
    when:
      - package.name in generic_packages

  - name: software | package | pips
    tags: packages,pip,workstation-packages
    become_user: "{{ user_name }}"
    ansible.builtin.pip:
      executable: /usr/bin/pip3
      name: "{{ package }}"
      state: "{{ (package.state in ['false', 'absent', 'no', false]) | ternary('absent', 'present') }}"
    loop: "{{ packages }}"
    loop_control:
      loop_var: package
    when:
      - package.name in pips

  - name: "workstation | include task | specific packages"
    ansible.builtin.include_tasks: "system_setup/{{ inc_task }}.yml"
    with_items:
      - authy
      - aws_cli
      - chromium
      - flameshot
      - kdenline
      - keepassxc
      - mattermost
      - misc_games
      - misc_packages
      - openshot
      - packer
      - signal
      - solaar
      - steam
      - syncthing
      - terraform
      - thunderbird
      - todoist
      - ulauncher
      - vagrant
    loop_control:
      loop_var: inc_task

  rescue:
    - set_fact: task_failed=true
